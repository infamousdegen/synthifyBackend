type Account = record { owner : principal; subaccount : opt vec nat8 };
type Allowance = record { allowance : nat; expires_at : opt nat64 };
type AllowanceArgs = record { account : Account; spender : Account };
type ICRCTransferError = variant {
  GenericError : _InlineICRCTransferErrorGenericError;
  TemporarilyUnavailable;
  BadBurn : _InlineICRCTransferErrorBadBurn;
  Duplicate : _InlineICRCTransferErrorDuplicate;
  BadFee : _InlineICRCTransferErrorBadFee;
  CreatedInFuture : _InlineICRCTransferErrorCreatedInFuture;
  TooOld;
  InsufficientFunds : _InlineICRCTransferErrorInsufficientFunds;
};
type ManualReply = variant { Ok : nat; Err : ICRCTransferError };
type ManualReply_1 = variant { Ok : nat; Err : ICRCTransferError };
type ManualReply_2 = variant { Ok : vec UtxoStatus; Err : UpdateBalanceError };
type SupportedStandard = record { url : text; name : text };
type UpdateBalanceError = variant {
  GenericError : _InlineUpdateBalanceErrorGenericError;
  TemporarilyUnavailable : text;
  AlreadyProcessing;
  NoNewUtxos : _InlineUpdateBalanceErrorNoNewUtxos;
};
type Utxo = record {
  height : nat32;
  value : nat64;
  outpoint : _InlineUtxoOutpoint;
};
type UtxoStatus = variant {
  ValueTooSmall : Utxo;
  Tainted : Utxo;
  Minted : _InlineUtxoStatusMinted;
  Checked : Utxo;
};
type Value = variant { Int : int; Nat : nat; Blob : vec nat8; Text : text };
type _InlineICRCTransferErrorBadBurn = record { min_burn_amount : nat };
type _InlineICRCTransferErrorBadFee = record { expected_fee : nat };
type _InlineICRCTransferErrorCreatedInFuture = record { ledger_time : nat64 };
type _InlineICRCTransferErrorDuplicate = record { duplicate_of : nat };
type _InlineICRCTransferErrorGenericError = record {
  message : text;
  error_code : nat;
};
type _InlineICRCTransferErrorInsufficientFunds = record { balance : nat };
type _InlineUpdateBalanceErrorGenericError = record {
  error_message : text;
  error_code : nat64;
};
type _InlineUpdateBalanceErrorNoNewUtxos = record {
  required_confirmations : nat32;
  current_confirmations : opt nat32;
};
type _InlineUtxoOutpoint = record { txid : vec nat8; vout : nat32 };
type _InlineUtxoStatusMinted = record {
  minted_amount : nat64;
  block_index : nat64;
  utxo : Utxo;
};
service : () -> {
  getBalance : (principal) -> (nat);
  getBtcDepositAddress : () -> (text);
  getCaller : () -> (principal) query;
  getTime : () -> (nat);
  getUint8array : (principal) -> (vec nat8) query;
  icrc1_balance_of : (Account) -> (nat) query;
  icrc1_decimals : () -> (nat8) query;
  icrc1_fee : () -> (nat) query;
  icrc1_metadata : () -> (vec record { text; Value }) query;
  icrc1_minting_account : () -> (opt Account) query;
  icrc1_name : () -> (text) query;
  icrc1_supported_standards : () -> (vec SupportedStandard) query;
  icrc1_symbol : () -> (text) query;
  icrc1_total_supply : () -> (nat) query;
  icrc2_allowance : (AllowanceArgs) -> (Allowance) query;
  mintTokens : (Account, nat) -> (ManualReply);
  testPadAccount : (opt vec nat8) -> (Account) query;
  transfer : (Account, nat) -> (ManualReply_1);
  transferToVault : (principal, nat, principal, nat) -> (ManualReply_1);
  updateBalance : () -> (ManualReply_2);
  updateVaultManagerAddress : (principal) -> (text);
}