type ComplexFunc = func (
    record {
      id : text;
      complexFunc : ComplexFunc;
      basicFunc : func (text) -> (text) query;
    },
    variant {
      Bad;
      ComplexFunc : ComplexFunc;
      Good;
      BasicFunc : func (text) -> (text) query;
    },
  ) -> (nat64);
type ManualReply = variant { Ok : func (vec nat8) -> () oneway; Err : text };
type Reaction = variant {
  Bad;
  ComplexFunc : ComplexFunc;
  Good;
  BasicFunc : func (text) -> (text) query;
};
type User = record {
  id : text;
  complexFunc : ComplexFunc;
  basicFunc : func (text) -> (text) query;
};
service : () -> {
  basicFuncParam : (func (text) -> (text) query) -> (
      func (text) -> (text) query,
    ) query;
  basicFuncParamArray : (vec func (text) -> (text) query) -> (
      vec func (text) -> (text) query,
    ) query;
  basicFuncReturnType : () -> (func (text) -> (text) query) query;
  basicFuncReturnTypeArray : () -> (vec func (text) -> (text) query) query;
  complexFuncParam : (func (User, Reaction) -> (nat64)) -> (
      func (User, Reaction) -> (nat64),
    ) query;
  complexFuncReturnType : () -> (func (User, Reaction) -> (nat64)) query;
  getNotifierFromNotifiersCanister : () -> (ManualReply);
  getStableFunc : () -> (func (nat64, text) -> () query) query;
  nullFuncParam : (
      func (opt null, vec null, null, vec vec null, vec opt null) -> (
          null,
        ) query,
    ) -> (
      func (opt null, vec null, null, vec vec null, vec opt null) -> (
          null,
        ) query,
    ) query;
}