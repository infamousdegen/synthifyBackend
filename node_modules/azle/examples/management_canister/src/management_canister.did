type CanisterStatus = variant { stopped; stopping; running };
type CanisterStatusArgs = record { canister_id : principal };
type CanisterStatusResult = record {
  status : CanisterStatus;
  memory_size : nat;
  cycles : nat;
  settings : DefiniteCanisterSettings;
  module_hash : opt vec nat8;
};
type CreateCanisterResult = record { canister_id : principal };
type DefiniteCanisterSettings = record {
  freezing_threshold : nat;
  controllers : vec principal;
  memory_allocation : nat;
  compute_allocation : nat;
};
type ManualReply = variant { Ok : CanisterStatusArgs; Err : text };
type ManualReply_1 = variant { Ok : bool; Err : text };
type ManualReply_2 = variant { Ok : CanisterStatusResult; Err : text };
type ManualReply_3 = variant { Ok : vec nat8; Err : text };
service : () -> {
  executeCreateCanister : () -> (ManualReply);
  executeDeleteCanister : (principal) -> (ManualReply_1);
  executeDepositCycles : (principal) -> (ManualReply_1);
  executeInstallCode : (principal, vec nat8) -> (ManualReply_1);
  executeStartCanister : (principal) -> (ManualReply_1);
  executeStopCanister : (principal) -> (ManualReply_1);
  executeUninstallCode : (principal) -> (ManualReply_1);
  executeUpdateSettings : (principal) -> (ManualReply_1);
  getCanisterStatus : (CanisterStatusArgs) -> (ManualReply_2);
  getCreatedCanisterId : () -> (principal) query;
  getRawRand : () -> (ManualReply_3);
  provisionalCreateCanisterWithCycles : () -> (ManualReply);
  provisionalTopUpCanister : (principal, nat) -> (ManualReply_1);
}