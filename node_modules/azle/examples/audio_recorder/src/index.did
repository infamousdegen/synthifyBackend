type Recording = record {
  id : principal;
  audio : vec nat8;
  userId : principal;
  name : text;
  createdAt : nat64;
};
type User = record {
  id : principal;
  username : text;
  recordingIds : vec principal;
  createdAt : nat64;
};
type _AzleResult = variant {
  Ok : Recording;
  Err : _InlineCreateRecordingReturnTypeTypeArg1;
};
type _AzleResult_1 = variant {
  Ok : Recording;
  Err : _InlineDeleteRecordingReturnTypeTypeArg1;
};
type _AzleResult_2 = variant {
  Ok : User;
  Err : _InlineDeleteUserReturnTypeTypeArg1;
};
type _InlineCreateRecordingReturnTypeTypeArg1 = variant {
  UserDoesNotExist : principal;
};
type _InlineDeleteRecordingReturnTypeTypeArg1 = variant {
  RecordingDoesNotExist : principal;
  UserDoesNotExist : principal;
};
type _InlineDeleteUserReturnTypeTypeArg1 = variant {
  UserDoesNotExist : principal;
};
service : () -> {
  createRecording : (vec nat8, text, principal) -> (_AzleResult);
  createUser : (text) -> (User);
  deleteRecording : (principal) -> (_AzleResult_1);
  deleteUser : (principal) -> (_AzleResult_2);
  readRecordingById : (principal) -> (opt Recording) query;
  readRecordings : () -> (vec Recording) query;
  readUserById : (principal) -> (opt User) query;
  readUsers : () -> (vec User) query;
}