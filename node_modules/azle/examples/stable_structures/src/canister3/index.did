type BlogPost = record { title : text };
type Reaction = variant { Sad; Happy };
type User = record { username : text; posts : vec BlogPost };
service : () -> {
  stableMap10ContainsKey : (float32) -> (bool) query;
  stableMap10Get : (float32) -> (opt opt bool) query;
  stableMap10Insert : (float32, opt bool) -> (opt opt bool);
  stableMap10IsEmpty : () -> (bool) query;
  stableMap10Items : () -> (vec record { float32; opt bool }) query;
  stableMap10Keys : () -> (vec float32) query;
  stableMap10Len : () -> (nat64) query;
  stableMap10Remove : (float32) -> (opt opt bool);
  stableMap10Values : () -> (vec opt bool) query;
  stableMap11ContainsKey : (nat) -> (bool) query;
  stableMap11Get : (nat) -> (opt User) query;
  stableMap11Insert : (nat, User) -> (opt User);
  stableMap11IsEmpty : () -> (bool) query;
  stableMap11Items : () -> (vec record { nat; User }) query;
  stableMap11Keys : () -> (vec nat) query;
  stableMap11Len : () -> (nat64) query;
  stableMap11Remove : (nat) -> (opt User);
  stableMap11Values : () -> (vec User) query;
  stableMap12ContainsKey : (vec nat8) -> (bool) query;
  stableMap12Get : (vec nat8) -> (opt Reaction) query;
  stableMap12Insert : (vec nat8, Reaction) -> (opt Reaction);
  stableMap12IsEmpty : () -> (bool) query;
  stableMap12Items : () -> (vec record { vec nat8; Reaction }) query;
  stableMap12Keys : () -> (vec vec nat8) query;
  stableMap12Len : () -> (nat64) query;
  stableMap12Remove : (vec nat8) -> (opt Reaction);
  stableMap12Values : () -> (vec Reaction) query;
  stableMap13ContainsKey : (text) -> (bool) query;
  stableMap13Get : (text) -> (opt principal) query;
  stableMap13Insert : (text, principal) -> (opt principal);
  stableMap13IsEmpty : () -> (bool) query;
  stableMap13Items : () -> (vec record { text; principal }) query;
  stableMap13Keys : () -> (vec text) query;
  stableMap13Len : () -> (nat64) query;
  stableMap13Remove : (text) -> (opt principal);
  stableMap13Values : () -> (vec principal) query;
}