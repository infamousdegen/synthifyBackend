type Account = record { id : text; balance : nat64 };
type AccountArgs = record { id : text };
type ManualReply = variant { Ok : opt Account; Err : text };
type ManualReply_1 = variant { Ok : vec Account; Err : text };
type ManualReply_2 = variant { Ok : nat64; Err : text };
type ManualReply_3 = variant { Ok : text; Err : text };
type RejectionCode = variant {
  NoError;
  CanisterError;
  SysTransient;
  DestinationInvalid;
  Unknown;
  SysFatal;
  CanisterReject;
};
type _AzleResult = variant { Ok; Err : RejectionCode };
service : () -> {
  account : (AccountArgs) -> (ManualReply);
  accounts : () -> (ManualReply_1);
  balance : (text) -> (ManualReply_2);
  sendNotification : () -> (_AzleResult);
  transfer : (text, text, nat64) -> (ManualReply_2);
  trap : () -> (ManualReply_3);
}