type Box = variant {
  Bad : record {
    record { text; nat64 };
    record { id : text; primitiveTwoTuple : record { text; nat64 } };
    Box;
  };
  Good;
};
type HttpResponse = record { headers : vec record { text; text } };
type Reaction = variant {
  Bad : record { record { text; nat64 }; User; Box };
  Good;
};
type StreamingCallbackType = variant {
  WithHeaders : vec record { text; text };
  WithoutHeaders;
};
type User = record { id : text; primitiveTwoTuple : record { text; nat64 } };
type _InlineTwoTupleWithInlineRecordsParam0 = record { hello : nat64 };
type _InlineTwoTupleWithInlineRecordsParam1 = record { goodbye : nat64 };
service : () -> {
  complexOneTupleInlineParam : (record { record { text; nat64 } }) -> (
      record { record { text; nat64 } },
    ) query;
  complexOneTupleInlineReturnType : () -> (
      record { record { text; nat64 } },
    ) query;
  complexOneTupleParam : (record { record { text; nat64 } }) -> (
      record { record { text; nat64 } },
    ) query;
  complexOneTupleReturnType : () -> (record { record { text; nat64 } }) query;
  complexThreeTupleInlineParam : (
      record { record { text; nat64 }; User; Reaction },
    ) -> (record { record { text; nat64 }; User; Reaction }) query;
  complexThreeTupleInlineReturnType : () -> (
      record { record { text; nat64 }; User; Reaction },
    ) query;
  complexThreeTupleParam : (record { record { text; nat64 }; User; Box }) -> (
      record { record { text; nat64 }; User; Box },
    ) query;
  complexThreeTupleReturnType : () -> (
      record { record { text; nat64 }; User; Box },
    ) query;
  complexTwoTupleInlineParam : (record { record { text; nat64 }; User }) -> (
      record { record { text; nat64 }; User },
    ) query;
  complexTwoTupleInlineReturnType : () -> (
      record { record { text; nat64 }; User },
    ) query;
  complexTwoTupleParam : (record { record { text; nat64 }; User }) -> (
      record { record { text; nat64 }; User },
    ) query;
  complexTwoTupleReturnType : () -> (
      record { record { text; nat64 }; User },
    ) query;
  nestedTupleQuery : (
      record { record { text; record { nat8; nat8 } }; int },
    ) -> (record { record { text; record { nat8; nat8 } }; int }) query;
  primitiveOneTupleInlineParam : (record { text }) -> (record { text }) query;
  primitiveOneTupleInlineReturnType : () -> (record { text }) query;
  primitiveOneTupleParam : (record { text }) -> (record { text }) query;
  primitiveOneTupleReturnType : () -> (record { text }) query;
  primitiveThreeTupleInlineParam : (record { text; nat64; principal }) -> (
      record { text; nat64; principal },
    ) query;
  primitiveThreeTupleInlineReturnType : () -> (
      record { text; nat64; principal },
    ) query;
  primitiveThreeTupleParam : (record { text; nat64; principal }) -> (
      record { text; nat64; principal },
    ) query;
  primitiveThreeTupleReturnType : () -> (
      record { text; nat64; principal },
    ) query;
  primitiveTwoTupleInlineParam : (record { text; text }) -> (
      record { text; text },
    ) query;
  primitiveTwoTupleInlineReturnType : () -> (record { text; text }) query;
  primitiveTwoTupleParam : (record { text; nat64 }) -> (
      record { text; nat64 },
    ) query;
  primitiveTwoTupleReturnType : () -> (record { text; nat64 }) query;
  tupleArrayParamsAndReturnType : (vec record { text; text }) -> (
      vec record { text; text },
    ) query;
  tupleArrayRecordField : () -> (HttpResponse) query;
  tupleArrayVariantField : () -> (StreamingCallbackType) query;
  twoTupleWithInlineRecords : (
      record {
        _InlineTwoTupleWithInlineRecordsParam0;
        _InlineTwoTupleWithInlineRecordsParam1;
      },
    ) -> (
      record {
        _InlineTwoTupleWithInlineRecordsParam0;
        _InlineTwoTupleWithInlineRecordsParam1;
      },
    ) query;
}